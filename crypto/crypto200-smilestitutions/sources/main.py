import operator
import random
import re
import emoji

BIGRAMS = []        # Сортированный список частот биграмм в виде ['th', 'he', ...]
DICTIONARY = {}     # Соответствие биграммы и ключа {'th' => 5, 'he' => 17, ...]
UNDICTIONARY = {}   # Соответствие ключа и биграммы {5 => 'th', 17 => 'he', ...]
DECODER = {}        # Соответствие EMOJI и биграммы {}
EMOJI = [i.decode() for i in [b'\xf0\x9f\x95\x97', b'\xf0\x9f\x91\xa2', b'\xf0\x9f\x8f\xb4', b'\xf0\x9f\x94\x81', b'\xf0\x9f\x8e\xac', b'\xf0\x9f\x91\x84', b'\xf0\x9f\xa6\x91', b'\xf0\x9f\xa5\x80', b'\xf0\x9f\x9a\x98', b'\xf0\x9f\x96\x87', b'\xf0\x9f\x9a\x9e', b'\xf0\x9f\x93\x8b', b'\xf0\x9f\x8c\xbb', b'\xf0\x9f\x95\xa3', b'\xf0\x9f\x97\xb3', b'\xf0\x9f\x98\x9b', b'\xf0\x9f\x98\xa1', b'\xf0\x9f\x8f\xa6', b'\xf0\x9f\x91\xb4', b'\xf0\x9f\x8e\x8e', b'\xf0\x9f\xa7\x80', b'\xf0\x9f\xa6\x8e', b'\xf0\x9f\x8f\xbb', b'\xf0\x9f\x85\xbe', b'\xf0\x9f\x8e\xb4', b'\xf0\x9f\x90\x8a', b'\xf0\x9f\xa4\x93', b'\xf0\x9f\x93\x9f', b'\xf0\x9f\x98\xbf', b'\xf0\x9f\x8f\xa8', b'\xf0\x9f\x9b\xab', b'\xf0\x9f\x9b\xb6', b'\xf0\x9f\xa4\x9e', b'\xf0\x9f\x8d\x80', b'\xf0\x9f\x8d\x99', b'\xf0\x9f\x95\x9c', b'\xf0\x9f\x93\xa5', b'\xf0\x9f\xa4\x94', b'\xf0\x9f\x90\x9f', b'\xf0\x9f\x92\x99', b'\xf0\x9f\x97\x83', b'\xf0\x9f\x96\x8a', b'\xf0\x9f\x8e\xad', b'\xf0\x9f\xa6\x82', b'\xf0\x9f\x8f\xaa', b'\xf0\x9f\x9a\x94', b'\xf0\x9f\x9a\x80', b'\xf0\x9f\x90\x8f', b'\xf0\x9f\x90\x8c', b'\xf0\x9f\x8f\xb5', b'\xf0\x9f\x92\x96', b'\xf0\x9f\x98\x89', b'\xf0\x9f\x8c\xa0', b'\xf0\x9f\xa5\x9d', b'\xf0\x9f\xa4\x92', b'\xf0\x9f\x91\xad', b'\xf0\x9f\x91\xae', b'\xf0\x9f\x95\xb6', b'\xf0\x9f\x90\xb7', b'\xf0\x9f\x8c\x91', b'\xf0\x9f\x94\xb3', b'\xf0\x9f\x95\xaf', b'\xf0\x9f\x98\x99', b'\xf0\x9f\x92\xbf', b'\xf0\x9f\x8f\xb7', b'\xf0\x9f\xa5\x90', b'\xf0\x9f\x8e\xab', b'\xf0\x9f\xa4\x91', b'\xf0\x9f\x93\xb6', b'\xf0\x9f\x8f\x9e', b'\xf0\x9f\x91\xa3', b'\xf0\x9f\x90\x80', b'\xf0\x9f\xa5\x99', b'\xf0\x9f\x8e\x89', b'\xf0\x9f\x8d\xac', b'\xf0\x9f\x98\xad', b'\xf0\x9f\x8d\x92', b'\xf0\x9f\x98\xaf', b'\xf0\x9f\x86\x9a', b'\xf0\x9f\x94\xb1', b'\xf0\x9f\x93\x8e', b'\xf0\x9f\x98\xb0', b'\xf0\x9f\x90\x91', b'\xf0\x9f\x91\xab', b'\xf0\x9f\x8e\x85', b'\xf0\x9f\x90\x96', b'\xf0\x9f\xa5\x95', b'\xf0\x9f\x9a\xb4', b'\xf0\x9f\x92\xb4', b'\xf0\x9f\x90\x8e', b'\xf0\x9f\xa5\x9c', b'\xf0\x9f\xa4\xbd', b'\xf0\x9f\x90\xa4', b'\xf0\x9f\x98\x96', b'\xf0\x9f\x90\xa7', b'\xf0\x9f\x8c\x9d', b'\xf0\x9f\x94\xa6', b'\xf0\x9f\x8d\x8d', b'\xf0\x9f\x94\xba', b'\xf0\x9f\x94\xb6', b'\xf0\x9f\xa4\xbc', b'\xf0\x9f\x8c\xa8', b'\xf0\x9f\x90\x83', b'\xf0\x9f\x91\x9c', b'\xf0\x9f\x83\x8f', b'\xf0\x9f\x88\xb3', b'\xf0\x9f\x98\x82', b'\xf0\x9f\x90\xba', b'\xf0\x9f\x9b\xb3', b'\xf0\x9f\x98\xa0', b'\xf0\x9f\x91\xb2', b'\xf0\x9f\x92\x94', b'\xf0\x9f\x92\x9c', b'\xf0\x9f\x8c\xb3', b'\xf0\x9f\x88\x82', b'\xf0\x9f\x9b\xb5', b'\xf0\x9f\x93\xb5', b'\xf0\x9f\xa4\xb6', b'\xf0\x9f\x90\x92', b'\xf0\x9f\x92\xb9', b'\xf0\x9f\xa6\x80', b'\xf0\x9f\x86\x99', b'\xf0\x9f\x92\xb8', b'\xf0\x9f\x8f\x99', b'\xf0\x9f\x86\x91', b'\xf0\x9f\x9b\xa5', b'\xf0\x9f\x92\x8c', b'\xf0\x9f\x8d\xbb', b'\xf0\x9f\x8c\x89', b'\xf0\x9f\xa4\xb8', b'\xf0\x9f\x96\x95', b'\xf0\x9f\x8f\xa9', b'\xf0\x9f\x98\xb5', b'\xf0\x9f\x90\xae', b'\xf0\x9f\xa4\xa7', b'\xf0\x9f\x9a\x8f', b'\xf0\x9f\x8c\xb8', b'\xf0\x9f\x8e\xbd', b'\xf0\x9f\x91\xac', b'\xf0\x9f\x95\xa2', b'\xf0\x9f\x8d\xb7', b'\xf0\x9f\x92\xa9', b'\xf0\x9f\x90\x98', b'\xf0\x9f\x98\xab', b'\xf0\x9f\x97\x84', b'\xf0\x9f\x90\xb0', b'\xf0\x9f\x91\xa0', b'\xf0\x9f\x98\xbc', b'\xf0\x9f\x8d\x87', b'\xf0\x9f\xa4\xa3', b'\xf0\x9f\x94\xa8', b'\xf0\x9f\x9a\x86', b'\xf0\x9f\x8d\xbf', b'\xf0\x9f\x97\x93', b'\xf0\x9f\xa5\x98', b'\xf0\x9f\x90\xa2', b'\xf0\x9f\x8c\xb2', b'\xf0\x9f\x92\x93', b'\xf0\x9f\x95\xa6', b'\xf0\x9f\x94\xac', b'\xf0\x9f\xa6\x87', b'\xf0\x9f\x90\x84', b'\xf0\x9f\xa4\xa1', b'\xf0\x9f\x9b\x83', b'\xf0\x9f\x8c\xad', b'\xf0\x9f\x8e\x81', b'\xf0\x9f\x92\xb5', b'\xf0\x9f\x90\x90', b'\xf0\x9f\x94\xa0', b'\xf0\x9f\x96\xa8', b'\xf0\x9f\x8d\x9e', b'\xf0\x9f\x97\x9e', b'\xf0\x9f\x95\xb4', b'\xf0\x9f\x8c\x8a', b'\xf0\x9f\x93\xa9', b'\xf0\x9f\x92\x8a', b'\xf0\x9f\x88\xb8', b'\xf0\x9f\x98\x9a', b'\xf0\x9f\xa4\x90', b'\xf0\x9f\x88\xb9', b'\xf0\x9f\x94\xaa', b'\xf0\x9f\x93\xab', b'\xf0\x9f\xa4\xb4', b'\xf0\x9f\x8e\xa9', b'\xf0\x9f\x92\x80', b'\xf0\x9f\x93\x87', b'\xf0\x9f\x93\xac', b'\xf0\x9f\x95\x9e', b'\xf0\x9f\xa4\xa6', b'\xf0\x9f\x98\x90', b'\xf0\x9f\x8d\x8b', b'\xf0\x9f\x8e\x97', b'\xf0\x9f\x9b\xb4', b'\xf0\x9f\x94\xb2', b'\xf0\x9f\x94\x96', b'\xf0\x9f\x8f\x8d', b'\xf0\x9f\x8d\xbe', b'\xf0\x9f\x8d\xa0', b'\xf0\x9f\xa5\x9b', b'\xf0\x9f\x91\x9b', b'\xf0\x9f\x92\xae', b'\xf0\x9f\x9a\x96', b'\xf0\x9f\x90\xb8', b'\xf0\x9f\x91\xb6', b'\xf0\x9f\x92\x91', b'\xf0\x9f\xa4\x99', b'\xf0\x9f\x8f\x95', b'\xf0\x9f\x8d\x85', b'\xf0\x9f\x8e\x92', b'\xf0\x9f\x8c\xb7', b'\xf0\x9f\x98\xa3', b'\xf0\x9f\x9a\xbf', b'\xf0\x9f\x9b\x8b', b'\xf0\x9f\xa5\x92', b'\xf0\x9f\x93\x89', b'\xf0\x9f\x93\xb9', b'\xf0\x9f\x9a\x89', b'\xf0\x9f\x8d\x9a', b'\xf0\x9f\x91\x8a', b'\xf0\x9f\x95\x96', b'\xf0\x9f\x9b\x84', b'\xf0\x9f\x8c\x9a', b'\xf0\x9f\x86\x97', b'\xf0\x9f\x94\x98', b'\xf0\x9f\x92\xba', b'\xf0\x9f\x8d\x83', b'\xf0\x9f\x8c\x99', b'\xf0\x9f\xa4\x9a', b'\xf0\x9f\x8d\xa7', b'\xf0\x9f\x90\x82', b'\xf0\x9f\x9b\x81', b'\xf0\x9f\xa4\x97', b'\xf0\x9f\xa5\x83', b'\xf0\x9f\x86\x92', b'\xf0\x9f\x8d\xa8', b'\xf0\x9f\x96\xa5', b'\xf0\x9f\x94\x82', b'\xf0\x9f\xa5\x84', b'\xf0\x9f\x94\x84', b'\xf0\x9f\x90\x9b', b'\xf0\x9f\x9a\x90', b'\xf0\x9f\x96\xb1', b'\xf0\x9f\x98\xb8', b'\xf0\x9f\x94\x85', b'\xf0\x9f\x8f\x94', b'\xf0\x9f\x95\x90', b'\xf0\x9f\x8f\x92', b'\xf0\x9f\x8f\xa0', b'\xf0\x9f\x96\xb2', b'\xf0\x9f\x91\xa7', b'\xf0\x9f\x9a\x88', b'\xf0\x9f\x99\x81', b'\xf0\x9f\xa4\xa4', b'\xf0\x9f\x8d\xbd', b'\xf0\x9f\x8c\xa4', b'\xf0\x9f\x9a\x85', b'\xf0\x9f\x92\xaa', b'\xf0\x9f\x95\x92', b'\xf0\x9f\x90\xbd', b'\xf0\x9f\x94\x9f', b'\xf0\x9f\x8c\x83', b'\xf0\x9f\x8c\x90', b'\xf0\x9f\x95\x9b', b'\xf0\x9f\x8e\x9e', b'\xf0\x9f\x98\x92', b'\xf0\x9f\xa4\xbe', b'\xf0\x9f\x8d\xb9', b'\xf0\x9f\x9a\xa7', b'\xf0\x9f\x8d\x8a', b'\xf0\x9f\x98\x8b', b'\xf0\x9f\x93\xb2', b'\xf0\x9f\x88\xba', b'\xf0\x9f\x95\xb3', b'\xf0\x9f\x9b\x85', b'\xf0\x9f\x92\x9d', b'\xf0\x9f\x98\xaa', b'\xf0\x9f\x8f\xb3', b'\xf0\x9f\x91\xbf', b'\xf0\x9f\x91\x98', b'\xf0\x9f\x90\x86', b'\xf0\x9f\x98\xa7', b'\xf0\x9f\x95\xb5', b'\xf0\x9f\x8f\xa1', b'\xf0\x9f\x9b\x82', b'\xf0\x9f\x9b\xac', b'\xf0\x9f\x9a\x8d', b'\xf0\x9f\x94\xb7', b'\xf0\x9f\xa5\x96', b'\xf0\x9f\x92\x88', b'\xf0\x9f\x94\x9a', b'\xf0\x9f\x8f\x9a', b'\xf0\x9f\x8c\x98', b'\xf0\x9f\x90\xb1', b'\xf0\x9f\x9b\xa3', b'\xf0\x9f\x99\x83', b'\xf0\x9f\x8d\xb4', b'\xf0\x9f\x9a\xa3', b'\xf0\x9f\x98\xa4', b'\xf0\x9f\x97\xbf', b'\xf0\x9f\x94\x97', b'\xf0\x9f\x9a\xac', b'\xf0\x9f\x94\xa9', b'\xf0\x9f\x8d\x9b', b'\xf0\x9f\x86\x98', b'\xf0\x9f\x95\x98', b'\xf0\x9f\x91\xaa', b'\xf0\x9f\x94\x8d', b'\xf0\x9f\x9a\x99', b'\xf0\x9f\x96\xa4', b'\xf0\x9f\x92\x9e', b'\xf0\x9f\x98\x9f', b'\xf0\x9f\x94\x8a', b'\xf0\x9f\x8c\x86', b'\xf0\x9f\x92\xa4', b'\xf0\x9f\x91\x96', b'\xf0\x9f\x93\x9d', b'\xf0\x9f\x98\xae', b'\xf0\x9f\x91\xa9', b'\xf0\x9f\x94\xb8', b'\xf0\x9f\x91\xb9', b'\xf0\x9f\x9a\xa1', b'\xf0\x9f\x90\x8b', b'\xf0\x9f\xa5\x93', b'\xf0\x9f\x90\xaa', b'\xf0\x9f\x8f\xbe', b'\xf0\x9f\x88\xb4', b'\xf0\x9f\xa4\xa2', b'\xf0\x9f\x92\x90', b'\xf0\x9f\xa6\x86', b'\xf0\x9f\x92\x87', b'\xf0\x9f\x91\xba', b'\xf0\x9f\xa5\x81', b'\xf0\x9f\x93\x93', b'\xf0\x9f\x9a\x8e', b'\xf0\x9f\x94\xbc', b'\xf0\x9f\x8d\x98', b'\xf0\x9f\x9a\xbe', b'\xf0\x9f\x99\x88', b'\xf0\x9f\x8e\xb1', b'\xf0\x9f\x98\x9c', b'\xf0\x9f\x8f\xa5', b'\xf0\x9f\x92\x9b', b'\xf0\x9f\x8c\xbc', b'\xf0\x9f\x8e\xbf', b'\xf0\x9f\x93\xa6', b'\xf0\x9f\x8c\x8f', b'\xf0\x9f\x8d\xa2', b'\xf0\x9f\x8f\x9d', b'\xf0\x9f\x8f\x8e', b'\xf0\x9f\x8d\xba', b'\xf0\x9f\x90\x94', b'\xf0\x9f\x9b\x8d', b'\xf0\x9f\x92\xac', b'\xf0\x9f\x93\x8f', b'\xf0\x9f\x9a\xbb', b'\xf0\x9f\x8f\x89', b'\xf0\x9f\x8c\xaa', b'\xf0\x9f\x94\x86', b'\xf0\x9f\x97\xbd', b'\xf0\x9f\x94\x93', b'\xf0\x9f\x93\xb8', b'\xf0\x9f\x98\x95', b'\xf0\x9f\x8c\x94', b'\xf0\x9f\x98\x91', b'\xf0\x9f\x93\x8a', b'\xf0\x9f\x88\x9a', b'\xf0\x9f\x97\xaf', b'\xf0\x9f\x91\x99', b'\xf0\x9f\xa6\x8f', b'\xf0\x9f\x92\xa2', b'\xf0\x9f\x91\xb7', b'\xf0\x9f\x90\xa8', b'\xf0\x9f\x8e\x88', b'\xf0\x9f\x8c\xa5', b'\xf0\x9f\x95\x9d', b'\xf0\x9f\x99\x8b', b'\xf0\x9f\x93\xaa', b'\xf0\x9f\x9a\xb5', b'\xf0\x9f\x8f\x88', b'\xf0\x9f\x91\x9f', b'\xf0\x9f\x98\x84', b'\xf0\x9f\xa5\x8a', b'\xf0\x9f\x93\x82', b'\xf0\x9f\x90\xad', b'\xf0\x9f\x8e\xb6', b'\xf0\x9f\x98\xba', b'\xf0\x9f\x92\x8d', b'\xf0\x9f\x91\x86', b'\xf0\x9f\x95\x93', b'\xf0\x9f\x90\xb6', b'\xf0\x9f\x90\x8d', b'\xf0\x9f\x92\xa7', b'\xf0\x9f\x94\xb9', b'\xf0\x9f\x93\x94', b'\xf0\x9f\x89\x90', b'\xf0\x9f\x99\x8c', b'\xf0\x9f\x98\x87', b'\xf0\x9f\x93\xa0', b'\xf0\x9f\x92\xa6', b'\xf0\x9f\x90\xb2', b'\xf0\x9f\x8d\xb2', b'\xf0\x9f\x8c\xbd', b'\xf0\x9f\xa5\x97', b'\xf0\x9f\x8e\x87', b'\xf0\x9f\x9a\x95', b'\xf0\x9f\x8e\x93', b'\xf0\x9f\x8e\xa2', b'\xf0\x9f\x8f\xa7', b'\xf0\x9f\x86\x94', b'\xf0\x9f\x9a\xa8', b'\xf0\x9f\x90\xbc', b'\xf0\x9f\x99\x82', b'\xf0\x9f\x90\xab', b'\xf0\x9f\x93\xa4', b'\xf0\x9f\x94\xa4', b'\xf0\x9f\x92\x85', b'\xf0\x9f\x98\xb2', b'\xf0\x9f\x91\x9a', b'\xf0\x9f\x86\x96', b'\xf0\x9f\x9a\xb6', b'\xf0\x9f\x93\xa3', b'\xf0\x9f\x94\x9c', b'\xf0\x9f\x8d\x97', b'\xf0\x9f\x88\xb2', b'\xf0\x9f\x98\xbb', b'\xf0\x9f\x99\x80', b'\xf0\x9f\x8f\xaf', b'\xf0\x9f\x94\x94', b'\xf0\x9f\x97\x92', b'\xf0\x9f\xa5\x82', b'\xf0\x9f\x8c\xab', b'\xf0\x9f\x88\x81', b'\xf0\x9f\x95\xb9', b'\xf0\x9f\x93\xb7', b'\xf0\x9f\x90\xa9', b'\xf0\x9f\xa6\x84', b'\xf0\x9f\x8e\xa4', b'\xf0\x9f\x98\x97', b'\xf0\x9f\x8e\x8a', b'\xf0\x9f\x9a\x8b', b'\xf0\x9f\x98\xb6', b'\xf0\x9f\x92\x92', b'\xf0\x9f\x9a\xb8', b'\xf0\x9f\x94\x99', b'\xf0\x9f\x94\x87', b'\xf0\x9f\xa6\x8b', b'\xf0\x9f\x98\xa9', b'\xf0\x9f\xa5\x91', b'\xf0\x9f\x93\x90', b'\xf0\x9f\x95\xa5', b'\xf0\x9f\x95\xa1', b'\xf0\x9f\x93\x98', b'\xf0\x9f\x8e\xb2', b'\xf0\x9f\x8f\x86', b'\xf0\x9f\x93\xb1', b'\xf0\x9f\x92\xad', b'\xf0\x9f\x8f\xae', b'\xf0\x9f\x9a\xa2', b'\xf0\x9f\x8f\xb0', b'\xf0\x9f\x9a\x9f', b'\xf0\x9f\x8e\x91', b'\xf0\x9f\x90\x89', b'\xf0\x9f\x93\xa2', b'\xf0\x9f\x94\x92', b'\xf0\x9f\x98\x9d', b'\xf0\x9f\x98\xa8', b'\xf0\x9f\x94\xa5', b'\xf0\x9f\x97\xa1', b'\xf0\x9f\x9a\x87', b'\xf0\x9f\xa6\x8d', b'\xf0\x9f\x8d\xa4', b'\xf0\x9f\x9a\xbd', b'\xf0\x9f\x8f\xbc', b'\xf0\x9f\x8c\x95', b'\xf0\x9f\x8c\xac', b'\xf0\x9f\x98\xac', b'\xf0\x9f\x97\xbc', b'\xf0\x9f\x9a\xa0', b'\xf0\x9f\x8f\x9f', b'\xf0\x9f\x9a\x9d', b'\xf0\x9f\x9b\x91', b'\xf0\x9f\x80\x84', b'\xf0\x9f\x91\x81', b'\xf0\x9f\x9a\xa5', b'\xf0\x9f\x8d\xa1', b'\xf0\x9f\x8d\x86', b'\xf0\x9f\x93\x91', b'\xf0\x9f\x93\xbc', b'\xf0\x9f\x8c\xae', b'\xf0\x9f\x93\x85', b'\xf0\x9f\x8c\xb1', b'\xf0\x9f\x90\xa5', b'\xf0\x9f\x91\xb1', b'\xf0\x9f\x94\x8b', b'\xf0\x9f\x9a\x83', b'\xf0\x9f\x8c\xb6', b'\xf0\x9f\x99\x8e', b'\xf0\x9f\x90\x93', b'\xf0\x9f\x8c\x9c', b'\xf0\x9f\x93\xa8', b'\xf0\x9f\x96\x8d', b'\xf0\x9f\x91\xa5', b'\xf0\x9f\x91\x95', b'\xf0\x9f\x9a\xaa', b'\xf0\x9f\x98\x85', b'\xf0\x9f\x93\x95', b'\xf0\x9f\x8d\xb3', b'\xf0\x9f\x8e\xb7', b'\xf0\x9f\x9b\x80', b'\xf0\x9f\x9a\x8c', b'\xf0\x9f\x8e\x99', b'\xf0\x9f\x8c\x88', b'\xf0\x9f\x8c\x82', b'\xf0\x9f\x8c\xb9', b'\xf0\x9f\x93\x83', b'\xf0\x9f\x91\x90', b'\xf0\x9f\x88\xb5', b'\xf0\x9f\x90\x99', b'\xf0\x9f\x95\x8d', b'\xf0\x9f\x99\x8a', b'\xf0\x9f\x8d\x89', b'\xf0\x9f\x9a\xba', b'\xf0\x9f\x86\x95', b'\xf0\x9f\x8c\x9b', b'\xf0\x9f\x9a\xad', b'\xf0\x9f\x92\x82', b'\xf0\x9f\x97\x9c', b'\xf0\x9f\x9a\x93', b'\xf0\x9f\x8e\xb3', b'\xf0\x9f\x93\xbb', b'\xf0\x9f\x8d\x94', b'\xf0\x9f\x93\x99', b'\xf0\x9f\x93\xad', b'\xf0\x9f\x90\x97', b'\xf0\x9f\x94\xb4', b'\xf0\x9f\x92\x81', b'\xf0\x9f\x98\x8e', b'\xf0\x9f\xa4\x98', b'\xf0\x9f\x8c\x87', b'\xf0\x9f\x98\xb7', b'\xf0\x9f\x95\xa7', b'\xf0\x9f\x98\xa2', b'\xf0\x9f\x9a\xa9', b'\xf0\x9f\xa5\x8b', b'\xf0\x9f\x97\xba', b'\xf0\x9f\xa4\x9d', b'\xf0\x9f\x8d\xb6', b'\xf0\x9f\xa5\x88', b'\xf0\x9f\x98\x8f', b'\xf0\x9f\x8e\x86', b'\xf0\x9f\x91\xbd', b'\xf0\x9f\x95\xb8', b'\xf0\x9f\x8e\xa7', b'\xf0\x9f\x94\xa3', b'\xf0\x9f\x8d\x9f', b'\xf0\x9f\x8f\x93', b'\xf0\x9f\x8d\x95', b'\xf0\x9f\x90\xb3', b'\xf0\x9f\x93\xb0', b'\xf0\x9f\x94\xbb', b'\xf0\x9f\x94\xab', b'\xf0\x9f\x91\x80', b'\xf0\x9f\x9a\x9c', b'\xf0\x9f\x85\xb1', b'\xf0\x9f\x95\x94', b'\xf0\x9f\x98\xb9', b'\xf0\x9f\x8d\xae', b'\xf0\x9f\x9a\x92', b'\xf0\x9f\x8c\x84', b'\xf0\x9f\x91\x8f', b'\xf0\x9f\x91\xa8', b'\xf0\x9f\xa6\x85', b'\xf0\x9f\x90\xa0', b'\xf0\x9f\xa4\xb9', b'\xf0\x9f\x8d\x91', b'\xf0\x9f\x99\x87', b'\xf0\x9f\x9a\xa6', b'\xf0\x9f\x98\x86', b'\xf0\x9f\x91\xb5', b'\xf0\x9f\x98\x8c', b'\xf0\x9f\x96\x8c', b'\xf0\x9f\x8e\xa3', b'\xf0\x9f\xa4\x9c', b'\xf0\x9f\x90\xbe', b'\xf0\x9f\x95\x8b', b'\xf0\x9f\x99\x84', b'\xf0\x9f\x93\x9c', b'\xf0\x9f\x99\x85', b'\xf0\x9f\x90\xbf', b'\xf0\x9f\x91\x93', b'\xf0\x9f\x94\x95', b'\xf0\x9f\x92\x89', b'\xf0\x9f\x91\xb0', b'\xf0\x9f\x98\xbe', b'\xf0\x9f\xa4\xba', b'\xf0\x9f\x92\xb0', b'\xf0\x9f\x93\xa1', b'\xf0\x9f\x93\x9a', b'\xf0\x9f\xa4\xa0', b'\xf0\x9f\x91\x83', b'\xf0\x9f\x8e\xb8', b'\xf0\x9f\x92\x97', b'\xf0\x9f\x8e\xa5', b'\xf0\x9f\x8e\x8b', b'\xf0\x9f\x91\xbc', b'\xf0\x9f\x8d\x9d', b'\xf0\x9f\x97\xa3', b'\xf0\x9f\x8c\x85', b'\xf0\x9f\x95\x9f', b'\xf0\x9f\x90\x81', b'\xf0\x9f\x8c\x80', b'\xf0\x9f\x9b\xa0', b'\xf0\x9f\x94\xb5', b'\xf0\x9f\x8e\xb0', b'\xf0\x9f\x8d\x82', b'\xf0\x9f\x94\xa7', b'\xf0\x9f\x97\xa8', b'\xf0\x9f\x8c\xba', b'\xf0\x9f\x98\xa5', b'\xf0\x9f\x98\x81', b'\xf0\x9f\x92\x98', b'\xf0\x9f\x8f\xb9', b'\xf0\x9f\x8e\xa0', b'\xf0\x9f\x98\x93', b'\xf0\x9f\x8d\xa9', b'\xf0\x9f\x92\xa5', b'\xf0\x9f\x98\x80', b'\xf0\x9f\x9a\x91', b'\xf0\x9f\xa4\x96', b'\xf0\x9f\x8c\x96', b'\xf0\x9f\x99\x86', b'\xf0\x9f\x99\x89', b'\xf0\x9f\x90\xb9', b'\xf0\x9f\x9b\x8c', b'\xf0\x9f\x8c\xb4', b'\xf0\x9f\x8d\x9c', b'\xf0\x9f\x98\x8a', b'\xf0\x9f\xa4\xb3', b'\xf0\x9f\x8d\x8f', b'\xf0\x9f\x88\xaf', b'\xf0\x9f\x8e\xa6', b'\xf0\x9f\x8d\x81', b'\xf0\x9f\x9b\x8f', b'\xf0\x9f\x92\x8e', b'\xf0\x9f\x9a\x8a', b'\xf0\x9f\x91\x9d', b'\xf0\x9f\x8e\xa1', b'\xf0\x9f\x91\x91', b'\xf0\x9f\x8e\xbb', b'\xf0\x9f\x9a\x9a', b'\xf0\x9f\x97\x91', b'\xf0\x9f\x90\x9d', b'\xf0\x9f\xa6\x8a', b'\xf0\x9f\x97\x82', b'\xf0\x9f\x8d\xb0', b'\xf0\x9f\x97\x9d', b'\xf0\x9f\x93\xb3', b'\xf0\x9f\x8d\xab', b'\xf0\x9f\xa5\x9a', b'\xf0\x9f\x93\x97', b'\xf0\x9f\x94\xa2', b'\xf0\x9f\x9a\x84', b'\xf0\x9f\x94\x90', b'\xf0\x9f\x94\x83', b'\xf0\x9f\x92\xbb', b'\xf0\x9f\x8c\xa9', b'\xf0\x9f\x98\x9e', b'\xf0\x9f\x93\xbd', b'\xf0\x9f\x92\xb1', b'\xf0\x9f\x93\x84', b'\xf0\x9f\x8c\x8c', b'\xf0\x9f\x8c\x97', b'\xf0\x9f\x95\x91', b'\xf0\x9f\xa6\x89', b'\xf0\x9f\x92\xaf', b'\xf0\x9f\x90\xb4']]

# ALPHABET = [i for i in range(26*26)]
# random.shuffle(ALPHABET)  # Раскомментировать для создания нового ключа
ALPHABET = [425, 172, 193, 280, 612, 427, 543, 496, 229, 639, 241, 562, 437, 261, 417, 497, 523, 544, 63, 169, 448, 608,
            527, 442, 598, 506, 121, 445, 651, 611, 577, 593, 150, 45, 333, 522, 512, 294, 595, 141, 539, 554, 47, 367,
            439, 84, 328, 3, 327, 604, 335, 257, 99, 174, 392, 550, 317, 233, 375, 475, 400, 273, 26, 80, 65, 296, 551,
            324, 69, 399, 265, 41, 555, 59, 267, 552, 457, 536, 521, 501, 9, 661, 483, 34, 234, 29, 53, 358, 22, 285,
            528, 407, 559, 563, 165, 329, 206, 0, 322, 223, 461, 341, 499, 581, 290, 221, 636, 384, 453, 35, 587, 242,
            594, 293, 21, 247, 149, 401, 353, 672, 331, 94, 212, 274, 89, 83, 252, 255, 299, 671, 531, 459, 411, 363,
            188, 230, 111, 541, 55, 175, 394, 524, 643, 364, 578, 119, 316, 7, 422, 71, 300, 357, 179, 503, 395, 397,
            607, 667, 391, 548, 354, 570, 380, 660, 309, 404, 343, 8, 130, 526, 136, 345, 673, 653, 446, 171, 278, 225,
            474, 220, 348, 444, 467, 632, 303, 424, 25, 128, 114, 115, 452, 323, 269, 479, 583, 386, 416, 572, 199, 369,
            529, 674, 204, 599, 443, 228, 187, 235, 277, 124, 515, 307, 144, 151, 155, 481, 640, 314, 52, 166, 494, 253,
            564, 421, 465, 619, 654, 127, 592, 618, 107, 415, 649, 586, 532, 456, 567, 250, 389, 390, 509, 388, 210,
            205, 545, 306, 406, 58, 76, 251, 517, 246, 423, 507, 505, 484, 431, 101, 534, 462, 270, 455, 450, 582, 222,
            70, 511, 486, 304, 240, 477, 133, 315, 489, 359, 168, 615, 588, 460, 470, 621, 579, 142, 433, 630, 134, 139,
            319, 61, 533, 291, 575, 650, 156, 157, 73, 485, 126, 170, 88, 258, 167, 108, 487, 542, 366, 493, 117, 92,
            320, 214, 352, 243, 256, 669, 104, 638, 637, 454, 464, 609, 248, 538, 666, 132, 184, 606, 313, 37, 502, 301,
            410, 665, 597, 342, 260, 318, 641, 15, 19, 463, 516, 580, 38, 347, 441, 398, 385, 283, 513, 488, 585, 185,
            202, 414, 96, 279, 584, 182, 629, 138, 125, 81, 622, 492, 656, 349, 135, 78, 383, 302, 218, 631, 161, 646,
            16, 72, 87, 272, 458, 51, 340, 216, 12, 43, 530, 97, 93, 574, 163, 377, 116, 286, 289, 664, 266, 232, 655,
            14, 310, 438, 370, 33, 100, 346, 476, 510, 308, 430, 658, 40, 405, 601, 480, 4, 568, 561, 56, 514, 571, 196,
            208, 419, 295, 194, 64, 332, 500, 24, 181, 565, 520, 140, 217, 549, 675, 620, 211, 382, 624, 374, 264, 18,
            245, 387, 652, 227, 447, 44, 409, 95, 432, 469, 662, 178, 642, 644, 628, 413, 312, 381, 519, 103, 112, 118,
            27, 350, 368, 79, 1, 379, 105, 553, 186, 275, 590, 77, 321, 66, 237, 200, 344, 183, 472, 605, 625, 393, 68,
            596, 180, 48, 657, 153, 627, 508, 371, 360, 376, 137, 365, 262, 298, 207, 50, 558, 576, 148, 408, 284, 173,
            36, 412, 30, 20, 281, 143, 131, 633, 75, 123, 546, 603, 288, 215, 396, 403, 219, 473, 224, 351, 466, 334,
            402, 537, 60, 337, 356, 158, 556, 449, 569, 239, 197, 547, 162, 573, 13, 557, 468, 39, 428, 62, 98, 482, 85,
            160, 436, 49, 152, 362, 10, 326, 645, 231, 32, 670, 478, 418, 434, 268, 287, 373, 31, 203, 626, 159, 129,
            91, 177, 338, 429, 54, 120, 525, 90, 164, 325, 145, 192, 238, 57, 420, 602, 613, 535, 259, 146, 297, 372,
            355, 191, 189, 566, 276, 236, 504, 249, 213, 617, 440, 659, 110, 634, 426, 46, 102, 589, 176, 540, 147, 560,
            106, 292, 282, 339, 336, 190, 195, 668, 42, 471, 451, 82, 623, 67, 6, 154, 201, 361, 518, 209, 74, 122, 305,
            495, 591, 2, 648, 86, 311, 271, 254, 663, 490, 378, 109, 244, 330, 263, 498, 600, 616, 226, 28, 23, 435,
            198, 17, 647, 113, 11, 635, 610, 5, 614, 491]


def make_dictionary():
    with open("english_bigrams.txt") as f:
        for index, line in enumerate(filter(lambda x: len(x), f.read().split("\n"))):
            letter, freq = line.split()
            BIGRAMS.append(letter)
            DICTIONARY[letter.lower()] = ALPHABET[index]
            UNDICTIONARY[ALPHABET[index]] = letter.lower()
            DECODER[EMOJI[ALPHABET[index]]] = letter.lower()


def encrypt(message):
    text_message = re.sub('[^a-z]', '', message.lower())
    make_dictionary()

    print("[DEBUG] len(msg) = {}, %2 = {}".format(len(text_message), len(text_message) % 2 == 0))
    assert (len(text_message) % 2 == 0)

    pairs = list(map(lambda x: ''.join(x), zip(text_message[::2], text_message[1::2])))
    enc_pairs = list(map(lambda x: DICTIONARY[x], pairs))
    dec_pairs = list(map(lambda x: UNDICTIONARY[x], enc_pairs))

    print("[DEBUG] {}\npairs     = {}\ndec_pairs = {}".format(pairs == dec_pairs, ''.join(pairs), ''.join(dec_pairs)))
    assert pairs == dec_pairs

    return enc_pairs


def decrypt(msg):
    FREQ = {}
    for letter in msg:
        if not letter in FREQ:
            FREQ[letter] = 1
        else:
            FREQ[letter] += 1

    s = ""
    for i in sorted(FREQ.items(), key=operator.itemgetter(1)):
        s += "{} - {}, ".format(i[0], i[1])
    return s

def table(emoji):
    res = ""
    for i in range(26*26):
        res += "{} => {}, ".format(emoji[i], DECODER[emoji[i]])
    return res

if __name__ == "__main__":
    encrypted_message = encrypt(open("text.txt").read())

    encoded_message = ' '.join([EMOJI[i] for i in encrypted_message])
    print("[DEBUG] MSG: {}".format(encoded_message))

    with open("encrypted.txt", "wb") as w:
        w.write(encoded_message.encode("UTF-8"))

    with open("dictionary.txt", "wb") as w:
        w.write(table(EMOJI).encode("UTF-8"))

    with open("experiments.txt", "wb") as w:
        w.write(decrypt(encoded_message).encode("UTF-8"))
